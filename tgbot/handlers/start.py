from typing import Dict

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile, MediaGroup
from loguru import logger

from tgbot import config
from tgbot.API.parser import Parser
from tgbot.filters.is_link import IsLinkForSearch
from tgbot.keyboards.tools.cb_data import search_pay_cb, show_pay_cb
from tgbot.loader import dp, Wallet
from tgbot.utils.user_data import save_data, get_fund_photos


@dp.message_handler(CommandStart())
async def start_handler(message: types.Message):
    text = '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –∏–Ω—Ç–∏–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ª—é–¥–µ–π\n\n' \
           'üî• –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ç–∏–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ' \
           '–ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç Instagram –∏–ª–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µüî•'
    await message.answer(text, disable_web_page_preview=True)


@dp.message_handler(IsLinkForSearch(), content_types=types.ContentTypes.TEXT)
async def get_link_handler(message: types.Message, state: FSMContext):
    if payment := await Wallet.create_invoice(value=config.SEARCH_COST):
        link = message.text.lower().strip()[:128]
        if 'vk.com' in link:
            if parsing_data := await Parser.parsing_vk(link):
                return await Parser.check_parser(parsing_data)
        if 'instagram.com/' in link:
            if parsing_data := await Parser.parsing_vk(link):
                return await Parser.check_parser(parsing_data)
        if parsing_data != None:
            await save_data(state, link, payment['billId'])
            text = f'{parsing_data}' \
                   f'üéÅ–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø–ª–∞—Ç–∏—Ç–µ: {config.SEARCH_COST} —Ä\n' \
                   f'–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", ' \
                   f'–¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏–ª"'
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=payment['payUrl'])],
                    [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏–ª', callback_data=search_pay_cb.new(uuid=payment['billId']))],
                ]
            )
        if parsing_data == None:
            text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            keyboard = None
    else:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.'
        keyboard = None
    logger.debug(f'\n\n{payment}\n\n')
    await message.answer(text, reply_markup=keyboard)


@dp.callback_query_handler(search_pay_cb.filter())
async def check_payment_handler(call: CallbackQuery, callback_data: Dict[str, str], state: FSMContext):
    bill_id = callback_data['uuid']
    bill = await Wallet.check_invoice(bill_id)
    if bill and bill['status']['value'] == 'PAID':
        if photos := await get_fund_photos(state, bill['billId']):
            album = MediaGroup()
            for photo in photos:
                album.attach_photo(InputFile(f'{config.PHOTOS_BLUR}/{photo}.jpg'))
            await call.message.answer_media_group(media=album)

            if payment := await Wallet.create_invoice(value=config.SHOW_COST):
                count = len(photos)
                text = f'–ù–∞–π–¥–µ–Ω–æ {count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n' \
                       f'üéÅ–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–∏—Ç–µ: {config.SHOW_COST} —Ä—É–±–ª–µ–π!'
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=payment['payUrl'])],
                        [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏–ª', callback_data=show_pay_cb.new(uuid=payment['billId']))],
                    ]
                )
            else:
                text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.'
                keyboard = None
        else:
            text = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n' \
                   '–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ vk.com/***** –∏–ª–∏ instagram.com/*****'
            keyboard = None
    elif bill:
        text = '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞'
        await call.message.answer(text)

        photos = await get_fund_photos(state, bill['billId'])
        count = len(photos)
        text = f'–ù–∞–π–¥–µ–Ω–æ {count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n' \
               f'üéÅ–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–∏—Ç–µ: {config.SHOW_COST} —Ä—É–±–ª–µ–π!'
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=bill['payUrl'])],
                [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏–ª', callback_data=search_pay_cb.new(uuid=bill['billId']))],
            ]
        )
    else:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.'
        keyboard = None
    await call.message.answer(text, reply_markup=keyboard, disable_web_page_preview=True)


@dp.callback_query_handler(show_pay_cb.filter())
async def check_show_payment_handler(call: CallbackQuery, callback_data: Dict[str, str], state: FSMContext):
    bill_id = callback_data['uuid']
    bill = await Wallet.check_invoice(bill_id)
    if bill and bill['status']['value'] == 'PAID':
        data = await state.get_data()
        photos = data['user_bills'][bill_id]['photos']
        album = MediaGroup()
        for photo in photos:
            album.attach_photo(InputFile(f'{config.PHOTOS_UNBLUR}/{photo}.jpg'))
        await call.message.answer_media_group(album)

        text = '–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã,—á—Ç–æ –º–æ–∂–µ–º —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å\n' \
               '–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ vk.com/***** –∏–ª–∏ instagram.com/*****, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ.'
        keyboard = None
    elif bill:
        text = '–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞.'
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=bill['payUrl'])],
                [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏–ª', callback_data=show_pay_cb.new(uuid=bill['billId']))],
            ]
        )
    else:
        text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.'
        keyboard = None
    await call.message.answer(text, reply_markup=keyboard, disable_web_page_preview=True)


@dp.message_handler()
async def no_handlers(message: types.Message):
    text = '–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É VK –∏–ª–∏ INSTAGRAM –≤ —Ñ–æ—Ä–º–∞—Ç–µ vk.com/***** –∏–ª–∏ instagram.com/*****\n' \
           '–ò —è –ø–æ–∫–∞–∂—É, –∏–Ω—Ç–∏–º–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
    await message.answer(text, disable_web_page_preview=True)
